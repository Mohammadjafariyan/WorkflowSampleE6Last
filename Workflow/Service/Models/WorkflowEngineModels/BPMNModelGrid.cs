// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WorkflowSample.Service.Models.WorkflowEngineModels;
//
//    var bpmnModel = BpmnModel.FromJson(jsonString);

namespace WorkflowSample.Service.Models.WorkflowEngineModels
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BpmnModel
    {
        [JsonProperty("definitionsAttributes")]
        public DataStores DefinitionsAttributes { get; set; }

        [JsonProperty("processes")]
        public Process[] Processes { get; set; }

        [JsonProperty("locationMap")]
        public Dictionary<string, LocationMap> LocationMap { get; set; }

        [JsonProperty("labelLocationMap")]
        public DataStores LabelLocationMap { get; set; }

        [JsonProperty("flowLocationMap")]
        public Dictionary<string, LocationMap[]> FlowLocationMap { get; set; }

        [JsonProperty("signals")]
        public object[] Signals { get; set; }

        [JsonProperty("pools")]
        public object[] Pools { get; set; }

        [JsonProperty("imports")]
        public object[] Imports { get; set; }

        [JsonProperty("interfaces")]
        public object[] Interfaces { get; set; }

        [JsonProperty("globalArtifacts")]
        public object[] GlobalArtifacts { get; set; }

        [JsonProperty("resources")]
        public object[] Resources { get; set; }

        [JsonProperty("targetNamespace")]
        public Uri TargetNamespace { get; set; }

        [JsonProperty("userTaskFormTypes")]
        public object UserTaskFormTypes { get; set; }

        [JsonProperty("startEventFormTypes")]
        public object StartEventFormTypes { get; set; }

        [JsonProperty("itemDefinitions")]
        public DataStores ItemDefinitions { get; set; }

        [JsonProperty("errors")]
        public DataStores Errors { get; set; }

        [JsonProperty("messageFlows")]
        public DataStores MessageFlows { get; set; }

        [JsonProperty("mainProcess")]
        public Process MainProcess { get; set; }

        [JsonProperty("messages")]
        public object[] Messages { get; set; }

        [JsonProperty("namespaces")]
        public Namespaces Namespaces { get; set; }

        [JsonProperty("dataStores")]
        public DataStores DataStores { get; set; }
    }

    public partial class DataStores
    {
    }

    public partial class LocationMap
    {
        [JsonProperty("x")]
        public long X { get; set; }

        [JsonProperty("y")]
        public long Y { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("element")]
        public object Element { get; set; }

        [JsonProperty("expanded")]
        public object Expanded { get; set; }

        [JsonProperty("xmlRowNumber")]
        public long XmlRowNumber { get; set; }

        [JsonProperty("xmlColumnNumber")]
        public long XmlColumnNumber { get; set; }
    }

    public partial class Process
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("xmlRowNumber")]
        public long XmlRowNumber { get; set; }

        [JsonProperty("xmlColumnNumber")]
        public long XmlColumnNumber { get; set; }

        [JsonProperty("extensionElements")]
        public DataStores ExtensionElements { get; set; }

        [JsonProperty("attributes")]
        public DataStores Attributes { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("executable")]
        public bool Executable { get; set; }

        [JsonProperty("documentation")]
        public object Documentation { get; set; }

        [JsonProperty("ioSpecification")]
        public object IoSpecification { get; set; }

        [JsonProperty("executionListeners")]
        public object[] ExecutionListeners { get; set; }

        [JsonProperty("lanes")]
        public object[] Lanes { get; set; }

        [JsonProperty("dataObjects")]
        public object[] DataObjects { get; set; }

        [JsonProperty("candidateStarterUsers")]
        public object[] CandidateStarterUsers { get; set; }

        [JsonProperty("candidateStarterGroups")]
        public object[] CandidateStarterGroups { get; set; }

        [JsonProperty("eventListeners")]
        public object[] EventListeners { get; set; }

        [JsonProperty("artifacts")]
        public object[] Artifacts { get; set; }

        [JsonProperty("flowElements")]
        public FlowElement[] FlowElements { get; set; }
    }

    public partial class FlowElement
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("xmlRowNumber")]
        public long XmlRowNumber { get; set; }

        [JsonProperty("xmlColumnNumber")]
        public long XmlColumnNumber { get; set; }

        [JsonProperty("extensionElements")]
        public DataStores ExtensionElements { get; set; }

        [JsonProperty("attributes")]
        public DataStores Attributes { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("documentation")]
        public object Documentation { get; set; }

        [JsonProperty("executionListeners")]
        public object[] ExecutionListeners { get; set; }

        [JsonProperty("asynchronous", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Asynchronous { get; set; }

        [JsonProperty("notExclusive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NotExclusive { get; set; }

        [JsonProperty("incomingFlows", NullValueHandling = NullValueHandling.Ignore)]
        public IngFlow[] IncomingFlows { get; set; }

        [JsonProperty("outgoingFlows", NullValueHandling = NullValueHandling.Ignore)]
        public IngFlow[] OutgoingFlows { get; set; }

        [JsonProperty("eventDefinitions", NullValueHandling = NullValueHandling.Ignore)]
        public object[] EventDefinitions { get; set; }

        [JsonProperty("initiator")]
        public object Initiator { get; set; }

        [JsonProperty("formKey")]
        public string FormKey { get; set; }

        [JsonProperty("formProperties", NullValueHandling = NullValueHandling.Ignore)]
        public FormProperty[] FormProperties { get; set; }

        [JsonProperty("defaultFlow")]
        public string DefaultFlow { get; set; }

        [JsonProperty("forCompensation", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ForCompensation { get; set; }

        [JsonProperty("loopCharacteristics")]
        public object LoopCharacteristics { get; set; }

        [JsonProperty("ioSpecification")]
        public object IoSpecification { get; set; }

        [JsonProperty("dataInputAssociations", NullValueHandling = NullValueHandling.Ignore)]
        public object[] DataInputAssociations { get; set; }

        [JsonProperty("dataOutputAssociations", NullValueHandling = NullValueHandling.Ignore)]
        public object[] DataOutputAssociations { get; set; }

        [JsonProperty("boundaryEvents", NullValueHandling = NullValueHandling.Ignore)]
        public object[] BoundaryEvents { get; set; }

        [JsonProperty("failedJobRetryTimeCycleValue")]
        public object FailedJobRetryTimeCycleValue { get; set; }

        [JsonProperty("mapExceptions", NullValueHandling = NullValueHandling.Ignore)]
        public object[] MapExceptions { get; set; }

        [JsonProperty("assignee")]
        public object Assignee { get; set; }

        [JsonProperty("owner")]
        public object Owner { get; set; }

        [JsonProperty("priority")]
        public object Priority { get; set; }

        [JsonProperty("dueDate")]
        public object DueDate { get; set; }

        [JsonProperty("category")]
        public object Category { get; set; }

        [JsonProperty("extensionId")]
        public object ExtensionId { get; set; }

        [JsonProperty("candidateUsers", NullValueHandling = NullValueHandling.Ignore)]
        public string[] CandidateUsers { get; set; }

        [JsonProperty("candidateGroups", NullValueHandling = NullValueHandling.Ignore)]
        public string[] CandidateGroups { get; set; }

        [JsonProperty("taskListeners", NullValueHandling = NullValueHandling.Ignore)]
        public TaskListener[] TaskListeners { get; set; }

        [JsonProperty("skipExpression")]
        public object SkipExpression { get; set; }

        [JsonProperty("customUserIdentityLinks", NullValueHandling = NullValueHandling.Ignore)]
        public DataStores CustomUserIdentityLinks { get; set; }

        [JsonProperty("customGroupIdentityLinks", NullValueHandling = NullValueHandling.Ignore)]
        public DataStores CustomGroupIdentityLinks { get; set; }

        [JsonProperty("customProperties", NullValueHandling = NullValueHandling.Ignore)]
        public object[] CustomProperties { get; set; }

        [JsonProperty("extended", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Extended { get; set; }

        [JsonProperty("conditionExpression")]
        public string ConditionExpression { get; set; }

        [JsonProperty("sourceRef", NullValueHandling = NullValueHandling.Ignore)]
        public string SourceRef { get; set; }

        [JsonProperty("targetRef", NullValueHandling = NullValueHandling.Ignore)]
        public string TargetRef { get; set; }
    }

    public partial class FormProperty
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("xmlRowNumber")]
        public long XmlRowNumber { get; set; }

        [JsonProperty("xmlColumnNumber")]
        public long XmlColumnNumber { get; set; }

        [JsonProperty("extensionElements")]
        public DataStores ExtensionElements { get; set; }

        [JsonProperty("attributes")]
        public DataStores Attributes { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("expression")]
        public object Expression { get; set; }

        [JsonProperty("variable")]
        public string Variable { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("defaultExpression")]
        public object DefaultExpression { get; set; }

        [JsonProperty("datePattern")]
        public object DatePattern { get; set; }

        [JsonProperty("readable")]
        public bool Readable { get; set; }

        [JsonProperty("writeable")]
        public bool Writeable { get; set; }

        [JsonProperty("required")]
        public bool FormPropertyRequired { get; set; }

        [JsonProperty("formValues")]
        public object[] FormValues { get; set; }
    }

    public partial class IngFlow
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("xmlRowNumber")]
        public long XmlRowNumber { get; set; }

        [JsonProperty("xmlColumnNumber")]
        public long XmlColumnNumber { get; set; }

        [JsonProperty("extensionElements")]
        public DataStores ExtensionElements { get; set; }

        [JsonProperty("attributes")]
        public DataStores Attributes { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("documentation")]
        public object Documentation { get; set; }

        [JsonProperty("executionListeners")]
        public object[] ExecutionListeners { get; set; }

        [JsonProperty("conditionExpression")]
        public string ConditionExpression { get; set; }

        [JsonProperty("sourceRef")]
        public string SourceRef { get; set; }

        [JsonProperty("targetRef")]
        public string TargetRef { get; set; }

        [JsonProperty("skipExpression")]
        public object SkipExpression { get; set; }
    }

    public partial class TaskListener
    {
        [JsonProperty("id")]
        public object Id { get; set; }

        [JsonProperty("xmlRowNumber")]
        public long XmlRowNumber { get; set; }

        [JsonProperty("xmlColumnNumber")]
        public long XmlColumnNumber { get; set; }

        [JsonProperty("extensionElements")]
        public DataStores ExtensionElements { get; set; }

        [JsonProperty("attributes")]
        public DataStores Attributes { get; set; }

        [JsonProperty("event")]
        public string Event { get; set; }

        [JsonProperty("implementationType")]
        public string ImplementationType { get; set; }

        [JsonProperty("implementation")]
        public string Implementation { get; set; }

        [JsonProperty("fieldExtensions")]
        public FieldExtension[] FieldExtensions { get; set; }
    }

    public partial class FieldExtension
    {
        [JsonProperty("id")]
        public object Id { get; set; }

        [JsonProperty("xmlRowNumber")]
        public long XmlRowNumber { get; set; }

        [JsonProperty("xmlColumnNumber")]
        public long XmlColumnNumber { get; set; }

        [JsonProperty("extensionElements")]
        public DataStores ExtensionElements { get; set; }

        [JsonProperty("attributes")]
        public DataStores Attributes { get; set; }

        [JsonProperty("fieldName")]
        public string FieldName { get; set; }

        [JsonProperty("stringValue")]
        public string StringValue { get; set; }

        [JsonProperty("expression")]
        public object Expression { get; set; }
    }

    public partial class Namespaces
    {
        [JsonProperty("xsi")]
        public Uri Xsi { get; set; }

        [JsonProperty("xsd")]
        public Uri Xsd { get; set; }

        [JsonProperty("activiti")]
        public Uri Activiti { get; set; }

        [JsonProperty("bpmndi")]
        public Uri Bpmndi { get; set; }

        [JsonProperty("omgdc")]
        public Uri Omgdc { get; set; }

        [JsonProperty("omgdi")]
        public Uri Omgdi { get; set; }
    }

    public enum TypeEnum { Long, String };

    public partial class BpmnModel
    {
        public static BpmnModel FromJson(string json) => JsonConvert.DeserializeObject<BpmnModel>(json, WorkflowSample.Service.Models.WorkflowEngineModels.Converter.Settings);
    }

   

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "long":
                    return TypeEnum.Long;
                case "string":
                    return TypeEnum.String;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Long:
                    serializer.Serialize(writer, "long");
                    return;
                case TypeEnum.String:
                    serializer.Serialize(writer, "string");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
