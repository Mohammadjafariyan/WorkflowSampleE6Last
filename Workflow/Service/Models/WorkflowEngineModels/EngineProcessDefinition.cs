namespace WorkflowSample.Service.Models.WorkflowEngineModels
{
    // <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WorkflowSample.Service.Models.WorkflowEngineModels;
//
//    var engineProcessDefinition = EngineProcessDefinition.FromJson(jsonString);

namespace WorkflowSample.Service.Models.WorkflowEngineModels
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class EngineProcessDefinitionGrid
    {
        [JsonProperty("data")]
        public EngineProcessDefinition[] Data { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("start")]
        public long Start { get; set; }

        [JsonProperty("sort")]
        public string Sort { get; set; }

        [JsonProperty("order")]
        public string Order { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }
    }

    public partial class EngineProcessDefinition
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("version")]
        public long Version { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("category")]
        public string Category { get; set; }

        [JsonProperty("suspended")]
        public bool Suspended { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("deploymentId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DeploymentId { get; set; }

        [JsonProperty("deploymentUrl")]
        public Uri DeploymentUrl { get; set; }

        [JsonProperty("graphicalNotationDefined")]
        public bool GraphicalNotationDefined { get; set; }

        [JsonProperty("resource")]
        public Uri Resource { get; set; }

        [JsonProperty("diagramResource")]
        public Uri DiagramResource { get; set; }

        [JsonProperty("startFormDefined")]
        public bool StartFormDefined { get; set; }
    }

    public partial class EngineProcessDefinition
    {
        public static EngineProcessDefinition FromJson(string json) => JsonConvert.DeserializeObject<EngineProcessDefinition>(json, WorkflowSample.Service.Models.WorkflowEngineModels.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this EngineProcessDefinition self) => JsonConvert.SerializeObject(self, WorkflowSample.Service.Models.WorkflowEngineModels.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}

}